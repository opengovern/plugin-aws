syntax = "proto3";

package pluginaws.optimization.v1;
option go_package="github.com/opengovern/plugin-aws/plugin/proto/src/golang/aws";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

// Requests ====================================

message Metric {
  repeated Datapoint metric = 1;
}

message VolumeMetrics {
  map<string,Metric> metrics = 1;
}

message RDSClusterMetrics {
  map<string,Metric> metrics = 1;
}

// EC2 Instance

message EC2Placement {
  string tenancy = 1;
  string availability_zone = 2;
  string hashed_host_id = 3;
}

message EC2Instance {
  string hashed_instance_id = 1;
  string state = 2;
  string instance_type = 3;
  string platform = 4;
  int32 threads_per_core = 5;
  int32 core_count = 6;
  bool ebs_optimized = 7;
  string instance_lifecycle = 8;
  google.protobuf.StringValue monitoring = 9;
  EC2Placement placement = 10;
  string usage_operation = 11;
  string tenancy = 12;
}

message EC2Volume {
  string hashed_volume_id = 1;
  string volume_type = 2;
  google.protobuf.Int32Value size = 3;
  google.protobuf.Int32Value iops = 4;
  google.protobuf.StringValue availability_zone = 5;
  google.protobuf.DoubleValue throughput = 6;
}

message EC2InstanceOptimizationRequest {
  google.protobuf.StringValue request_id = 1;
  google.protobuf.StringValue cli_version = 2;
  map<string,string> identification = 3;
  EC2Instance instance = 4;
  repeated EC2Volume volumes = 5;
  int64 volume_count = 6;
  map<string,Metric> metrics = 7;
  map<string,VolumeMetrics> volume_metrics = 8;
  string region = 9;
  map<string,google.protobuf.StringValue> preferences = 10;
  bool loading = 11;
}

// RDS Instance

message RDSInstance {
  string hashed_instance_id = 1;
  string availability_zone = 2;
  string instance_type = 3;
  string engine = 4;
  string engine_version = 5;
  string license_model = 6;
  google.protobuf.Int32Value backup_retention_period = 7;
  string cluster_type = 8;
  bool performance_insights_enabled = 9;
  google.protobuf.Int32Value performance_insights_retention_period = 10;
  google.protobuf.StringValue storage_type = 11;
  google.protobuf.Int32Value storage_size = 12;
  google.protobuf.Int32Value storage_iops = 13;
  google.protobuf.DoubleValue storage_throughput = 14;
}

message RDSInstanceOptimizationRequest {
  google.protobuf.StringValue request_id = 1;
  google.protobuf.StringValue cli_version = 2;
  map<string,string> identification = 3;
  RDSInstance instance = 4;
  map<string,Metric> metrics = 5;
  string region = 7;
  map<string,google.protobuf.StringValue> preferences = 8;
  bool loading = 9;
}

// RDS Cluster

message RDSCluster {
  string hashed_cluster_id = 1;
  string engine = 2;
}

message RDSClusterOptimizationRequest {
  google.protobuf.StringValue request_id = 1;
  google.protobuf.StringValue cli_version = 2;
  map<string,string> identification = 3;
  RDSCluster cluster = 4;
  repeated RDSInstance instances = 5;
  map<string,RDSClusterMetrics> metrics = 6;
  string region = 7;
  map<string,google.protobuf.StringValue> preferences = 8;
  bool loading = 9;
}

// Responses ====================================
message Datapoint {
  google.protobuf.DoubleValue average = 1;
  google.protobuf.DoubleValue maximum = 2;
  google.protobuf.DoubleValue minimum = 3;
  google.protobuf.DoubleValue sample_count = 4;
  google.protobuf.DoubleValue sum = 5;
  google.protobuf.Timestamp timestamp = 6;
}

message Usage {
  google.protobuf.DoubleValue avg = 1;
  google.protobuf.DoubleValue max = 2;
  google.protobuf.DoubleValue min = 3;
  Datapoint last = 4;
}

// EC2Instance
message RightsizingEC2Instance {
  string instance_type = 1;
  string region = 2;
  double cost = 3;
  map<string,double> cost_components = 4;
  string processor = 5;
  string architecture = 6;
  int64 vcpu = 7;
  double memory = 8;
  string ebs_bandwidth = 9;
  string ebs_iops = 10;
  string network_throughput = 11;
  string ena_supported = 12;
  double license_price = 13;
  string license = 14;
}

message EC2InstanceRightSizingRecommendation {
  RightsizingEC2Instance current = 1;
  RightsizingEC2Instance recommended = 2;
  Usage vcpu = 3;
  Usage memory = 4;
  Usage ebs_bandwidth = 5;
  Usage ebs_iops = 6;
  Usage network_throughput = 7;
  string description = 8;
}

message RightsizingEBSVolume {
  string tier = 1;
  google.protobuf.Int32Value volume_size = 2;
  int32 baseline_iops = 3;
  google.protobuf.Int32Value provisioned_iops = 4;
  double baseline_throughput = 5;
  google.protobuf.DoubleValue provisioned_throughput = 6;
  double cost = 7;
  map<string,double> cost_components = 8;
}

message EBSVolumeRecommendation {
  RightsizingEBSVolume current = 1;
  RightsizingEBSVolume recommended = 2;
  Usage iops = 3;
  Usage throughput = 4;
  string description = 5;
}

message EC2InstanceOptimizationResponse {
  EC2InstanceRightSizingRecommendation right_sizing = 1;
  map<string,EBSVolumeRecommendation> volume_right_sizing = 2;
}

// RDSInstance

message RightsizingAwsRds {
  string region = 1;
  string instance_type = 2;
  string engine = 3;
  string engine_version = 4;
  string cluster_type = 5;
  string processor = 6;
  string architecture = 7;
  int64 vcpu = 8;
  int64 memory_gb = 9;
  google.protobuf.StringValue storage_type = 10;
  google.protobuf.Int32Value storage_size = 11;
  google.protobuf.Int32Value storage_iops = 12;
  google.protobuf.DoubleValue storage_throughput = 13;
  double cost = 14;
  map<string,double> cost_components = 15;
  double compute_cost = 16;
  map<string,double> compute_cost_components = 17;
  double storage_cost = 18;
  map<string,double> storage_cost_components = 19;
}

message RDSInstanceRightSizingRecommendation {
  RightsizingAwsRds current = 1;
  RightsizingAwsRds recommended = 2;
  Usage vcpu = 3;
  Usage free_memory_bytes = 4;
  Usage free_storage_bytes = 5;
  Usage network_throughput_bytes = 6;
  Usage storage_iops = 7;
  Usage storage_throughput = 8;
  Usage volume_bytes_used = 9;
  string description = 10;
}

message RDSInstanceOptimizationResponse {
  RDSInstanceRightSizingRecommendation right_sizing = 1;
}

// RDSCluster

message RDSClusterOptimizationResponse {
  map<string,RDSInstanceRightSizingRecommendation> right_sizing = 1;
}

service Optimization {
  rpc EC2InstanceOptimization(EC2InstanceOptimizationRequest) returns (EC2InstanceOptimizationResponse);
  rpc RDSInstanceOptimization(RDSInstanceOptimizationRequest) returns (RDSInstanceOptimizationResponse);
  rpc RDSClusterOptimization(RDSClusterOptimizationRequest) returns (RDSClusterOptimizationResponse);
}